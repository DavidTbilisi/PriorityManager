import click
import random
from datetime import datetime, timedelta
import os
from priority_manager.utils.config import CONFIG
from priority_manager.utils.helpers import ensure_dirs

TASKS_DIR = CONFIG["directories"]["tasks_dir"]
STATUSES = CONFIG["statuses"]

TEMPLATE = """**Name:** {name}\n\n**Description:** {description}\n\n**Priority Score:** {priority}\n\n**Due Date:** {due}\n\n**Tags:** {tags}\n\n**Date Added:** {date_added}\n\n**Status:** {status}\n"""

@click.command()
@click.option("--count", "count", type=int, default=5, show_default=True, help="Number of tasks to generate.")
@click.option("--clean/--no-clean", default=False, show_default=True, help="Clean tasks directory before seeding.")
@click.option("--start-date", type=click.DateTime(formats=["%Y-%m-%d"]), default=None, help="Base start date (defaults to today).")
@click.option("--span-days", type=int, default=30, show_default=True, help="Span of days forward for random due dates.")
@click.option("--tags", type=str, default="demo,seed", show_default=True, help="Comma separated default tags.")
@click.option("--prefix", type=str, default="Seed Task", show_default=True, help="Name prefix for tasks.")
@click.option("--random-priority/--fixed-priority", default=True, show_default=True, help="Randomize priority scores (else fixed at 10).")
@click.option("--status", type=click.Choice(STATUSES), default="To Do", show_default=True, help="Default status to assign.")
@click.option("--open", "open_chart", is_flag=True, help="After seeding, open a Gantt chart (if plotly installed).")
@click.option("--gantt-wait", is_flag=True, help="With --open, keep process alive waiting for Enter.")
@click.option("--due-prob", type=float, default=0.9, show_default=True, help="Probability a task has a due date.")
@click.option("--dry-run", is_flag=True, help="Show what would be created without writing files.")
def seed_tasks(count, clean, start_date, span_days, tags, prefix, random_priority, status, open_chart, gantt_wait, due_prob, dry_run):
    """Seed the tasks directory with sample tasks for testing/demo."""
    ensure_dirs()
    if clean:
        for f in os.listdir(TASKS_DIR):
            os.remove(os.path.join(TASKS_DIR, f))
        click.echo("Cleaned existing tasks.")

    base = start_date.date() if start_date else datetime.now().date()
    created = []
    for i in range(1, count + 1):
        name = f"{prefix} {i}"
        priority = random.randint(1, 25) if random_priority else 10
        if random.random() < due_prob:
            due = (base + timedelta(days=random.randint(1, span_days))).strftime("%Y-%m-%d")
        else:
            due = "No due date"
        date_added = datetime.now().isoformat()
        description = f"Autogenerated seed task {i}."
        filename = f"{datetime.now().strftime('%Y-%m-%dT%H-%M-%S')}_{i}.md"
        content = TEMPLATE.format(
            name=name,
            description=description,
            priority=priority,
            due=due,
            tags=tags,
            date_added=date_added,
            status=status,
        )
        if dry_run:
            click.echo(f"[DRY] Would create {filename}: {name} (priority {priority})")
        else:
            with open(os.path.join(TASKS_DIR, filename), "w", encoding="utf-8") as f:
                f.write(content)
            created.append(filename)
    if not dry_run:
        click.echo(f"Created {len(created)} task file(s).")
        if open_chart and created:
            try:
                from priority_manager.commands.gantt import gantt as gantt_cmd
                from click.testing import CliRunner
                runner = CliRunner()
                args = ["--no-open"]
                if gantt_wait:
                    args.append("--wait")
                runner.invoke(gantt_cmd, args)
            except Exception as e:
                click.secho(f"Failed to open gantt: {e}", fg="red")

if __name__ == "__main__":
    seed_tasks()
